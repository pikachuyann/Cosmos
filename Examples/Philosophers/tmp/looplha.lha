const double T=10;
const double invT=0.1;
const double Ttrans=0;
VariablesList = {time, backToThink_p1, backToThink_p2, backToThink_p3, backToThink_p4, backToThink_p5, takeLeft_p1, takeLeft_p2, takeLeft_p3, takeLeft_p4, takeLeft_p5, takeRight_p1, takeRight_p2, takeRight_p3, takeRight_p4, takeRight_p5, PLVAR_Think_p1, PLVAR_Think_p2, PLVAR_Think_p3, PLVAR_Think_p4, PLVAR_Think_p5, PLVAR_Wait_p1, PLVAR_Wait_p2, PLVAR_Wait_p3, PLVAR_Wait_p4, PLVAR_Wait_p5, PLVAR_Eat_p1, PLVAR_Eat_p2, PLVAR_Eat_p3, PLVAR_Eat_p4, PLVAR_Eat_p5, PLVAR_Fork_p1, PLVAR_Fork_p2, PLVAR_Fork_p3, PLVAR_Fork_p4, PLVAR_Fork_p5} ;
LocationsList = {l0, l1,l2};
Throughput_backToThink_p1= AVG(Last(backToThink_p1));
Throughput_backToThink_p2= AVG(Last(backToThink_p2));
Throughput_backToThink_p3= AVG(Last(backToThink_p3));
Throughput_backToThink_p4= AVG(Last(backToThink_p4));
Throughput_backToThink_p5= AVG(Last(backToThink_p5));
Throughput_takeLeft_p1= AVG(Last(takeLeft_p1));
Throughput_takeLeft_p2= AVG(Last(takeLeft_p2));
Throughput_takeLeft_p3= AVG(Last(takeLeft_p3));
Throughput_takeLeft_p4= AVG(Last(takeLeft_p4));
Throughput_takeLeft_p5= AVG(Last(takeLeft_p5));
Throughput_takeRight_p1= AVG(Last(takeRight_p1));
Throughput_takeRight_p2= AVG(Last(takeRight_p2));
Throughput_takeRight_p3= AVG(Last(takeRight_p3));
Throughput_takeRight_p4= AVG(Last(takeRight_p4));
Throughput_takeRight_p5= AVG(Last(takeRight_p5));
MeanToken_Think_p1= AVG(Last( PLVAR_Think_p1));
MeanToken_Think_p2= AVG(Last( PLVAR_Think_p2));
MeanToken_Think_p3= AVG(Last( PLVAR_Think_p3));
MeanToken_Think_p4= AVG(Last( PLVAR_Think_p4));
MeanToken_Think_p5= AVG(Last( PLVAR_Think_p5));
MeanToken_Wait_p1= AVG(Last( PLVAR_Wait_p1));
MeanToken_Wait_p2= AVG(Last( PLVAR_Wait_p2));
MeanToken_Wait_p3= AVG(Last( PLVAR_Wait_p3));
MeanToken_Wait_p4= AVG(Last( PLVAR_Wait_p4));
MeanToken_Wait_p5= AVG(Last( PLVAR_Wait_p5));
MeanToken_Eat_p1= AVG(Last( PLVAR_Eat_p1));
MeanToken_Eat_p2= AVG(Last( PLVAR_Eat_p2));
MeanToken_Eat_p3= AVG(Last( PLVAR_Eat_p3));
MeanToken_Eat_p4= AVG(Last( PLVAR_Eat_p4));
MeanToken_Eat_p5= AVG(Last( PLVAR_Eat_p5));
MeanToken_Fork_p1= AVG(Last( PLVAR_Fork_p1));
MeanToken_Fork_p2= AVG(Last( PLVAR_Fork_p2));
MeanToken_Fork_p3= AVG(Last( PLVAR_Fork_p3));
MeanToken_Fork_p4= AVG(Last( PLVAR_Fork_p4));
MeanToken_Fork_p5= AVG(Last( PLVAR_Fork_p5));

InitialLocations={l0};
FinalLocations={l2};
Locations={(l0, TRUE, (time:1));(l1, TRUE, (time:1 , PLVAR_Think_p1: Think_p1* invT , PLVAR_Think_p2: Think_p2* invT , PLVAR_Think_p3: Think_p3* invT , PLVAR_Think_p4: Think_p4* invT , PLVAR_Think_p5: Think_p5* invT , PLVAR_Wait_p1: Wait_p1* invT , PLVAR_Wait_p2: Wait_p2* invT , PLVAR_Wait_p3: Wait_p3* invT , PLVAR_Wait_p4: Wait_p4* invT , PLVAR_Wait_p5: Wait_p5* invT , PLVAR_Eat_p1: Eat_p1* invT , PLVAR_Eat_p2: Eat_p2* invT , PLVAR_Eat_p3: Eat_p3* invT , PLVAR_Eat_p4: Eat_p4* invT , PLVAR_Eat_p5: Eat_p5* invT , PLVAR_Fork_p1: Fork_p1* invT , PLVAR_Fork_p2: Fork_p2* invT , PLVAR_Fork_p3: Fork_p3* invT , PLVAR_Fork_p4: Fork_p4* invT , PLVAR_Fork_p5: Fork_p5* invT ));(l2, TRUE);};
Edges={((l0,l0),ALL,time<= Ttrans ,#);((l0,l1),#,time=Ttrans ,{time=0});((l1,l1),{backToThink_p1},time<=T,{backToThink_p1 = backToThink_p1 + 0.1 });
((l1,l1),{backToThink_p2},time<=T,{backToThink_p2 = backToThink_p2 + 0.1 });
((l1,l1),{backToThink_p3},time<=T,{backToThink_p3 = backToThink_p3 + 0.1 });
((l1,l1),{backToThink_p4},time<=T,{backToThink_p4 = backToThink_p4 + 0.1 });
((l1,l1),{backToThink_p5},time<=T,{backToThink_p5 = backToThink_p5 + 0.1 });
((l1,l1),{takeLeft_p1},time<=T,{takeLeft_p1 = takeLeft_p1 + 0.1 });
((l1,l1),{takeLeft_p2},time<=T,{takeLeft_p2 = takeLeft_p2 + 0.1 });
((l1,l1),{takeLeft_p3},time<=T,{takeLeft_p3 = takeLeft_p3 + 0.1 });
((l1,l1),{takeLeft_p4},time<=T,{takeLeft_p4 = takeLeft_p4 + 0.1 });
((l1,l1),{takeLeft_p5},time<=T,{takeLeft_p5 = takeLeft_p5 + 0.1 });
((l1,l1),{takeRight_p1},time<=T,{takeRight_p1 = takeRight_p1 + 0.1 });
((l1,l1),{takeRight_p2},time<=T,{takeRight_p2 = takeRight_p2 + 0.1 });
((l1,l1),{takeRight_p3},time<=T,{takeRight_p3 = takeRight_p3 + 0.1 });
((l1,l1),{takeRight_p4},time<=T,{takeRight_p4 = takeRight_p4 + 0.1 });
((l1,l1),{takeRight_p5},time<=T,{takeRight_p5 = takeRight_p5 + 0.1 });
((l1,l2),#,time=T ,#);};