const int numL = 2;
const int numF = 1;
const int numE = 1;
const double regT = 1;
const double billT = 1;
const double remindT = 0.1;
const double payT = 0.3;
const double archT = 1.5;
const double chkT = 0.5;
const double replT = 0.18;
const double updT = 0.3;
const double shipT = 0.1;
const double newordT = 0.25;
const double choice = 12;
NbPlaces= 24;
NbTransitions= 27;


PlacesList ={ start, E_avail, F_avail, L_avail, start_E, start_F, start_L, checking, billing, billing_F, billed, checking_L, checked, shipping, replenish, updating, replenish_L, shipping_l, shipped, payed, archiving_E, archiving_F, archiving_L, archived };

TransitionsList ={ do_not_order, reorder, in_stock, t24, t23, t22, t18, t16, t7, t9, t3, t1, t2, new_order, archive_L, archive_F, archive_E, ship_goods, replenishing, check_availability, update, receive_payments, send_bill, reminder, register_l, register_F, register_E };

Marking ={
	(start , 0);
	(E_avail , numE);
	(F_avail , numF);
	(L_avail , numL);
	(start_E , 0);
	(start_F , 0);
	(start_L , 0);
	(checking , 0);
	(billing , 0);
	(billing_F , 0);
	(billed , 0);
	(checking_L , 0);
	(checked , 0);
	(shipping , 0);
	(replenish , 0);
	(updating , 0);
	(replenish_L , 0);
	(shipping_l , 0);
	(shipped , 0);
	(payed , 0);
	(archiving_E , 0);
	(archiving_F , 0);
	(archiving_L , 0);
	(archived , 1);
};

Transitions ={
	(do_not_order, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(reorder, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(in_stock, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t24, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t23, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t22, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t18, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t16, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t7, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t9, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t3, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t1, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(t2, EXPONENTIAL(choice), 1, 1,  SINGLE);
	(new_order, EXPONENTIAL(newordT), 1, 1,  SINGLE);
	(archive_L, EXPONENTIAL(archT), 1, 1,  SINGLE);
	(archive_F, EXPONENTIAL(archT), 1, 1,  SINGLE);
	(archive_E, EXPONENTIAL(archT), 1, 1,  SINGLE);
	(ship_goods, EXPONENTIAL(shipT), 1, 1,  SINGLE);
	(replenishing, EXPONENTIAL(replT), 1, 1,  SINGLE);
	(check_availability, EXPONENTIAL(chkT), 1, 1,  SINGLE);
	(update, EXPONENTIAL(updT), 1, 1,  SINGLE);
	(receive_payments, EXPONENTIAL(payT), 1, 1,  SINGLE);
	(send_bill, EXPONENTIAL(billT), 1, 1,  SINGLE);
	(reminder, EXPONENTIAL(remindT), 1, 1,  SINGLE);
	(register_l, EXPONENTIAL(regT), 1, 1,  SINGLE);
	(register_F, EXPONENTIAL(regT), 1, 1,  SINGLE);
	(register_E, EXPONENTIAL(regT), 1, 1,  SINGLE);
};

InArcs={
	(checked, do_not_order, 1);
	(checked, reorder, 1);
	(checked, in_stock, 1);
	(L_avail, t24, 1);
	(payed, t24, 1);
	(shipped, t24, 1);
	(F_avail, t23, 1);
	(payed, t23, 1);
	(shipped, t23, 1);
	(E_avail, t22, 1);
	(payed, t22, 1);
	(shipped, t22, 1);
	(L_avail, t18, 1);
	(shipping, t18, 1);
	(L_avail, t16, 1);
	(replenish, t16, 1);
	(billing, t7, 1);
	(F_avail, t7, 1);
	(checking, t9, 1);
	(L_avail, t9, 1);
	(start, t3, 1);
	(L_avail, t3, 1);
	(start, t1, 1);
	(F_avail, t1, 1);
	(start, t2, 1);
	(E_avail, t2, 1);
	(archived, new_order, 1);
	(archiving_L, archive_L, 1);
	(archiving_F, archive_F, 1);
	(archiving_E, archive_E, 1);
	(shipping_l, ship_goods, 1);
	(replenish_L, replenishing, 1);
	(checking_L, check_availability, 1);
	(updating, update, 1);
	(billed, receive_payments, 1);
	(billing_F, send_bill, 1);
	(billed, reminder, 1);
	(shipped, reminder, 1);
	(start_L, register_l, 1);
	(start_F, register_F, 1);
	(start_E, register_E, 1);
};

OutArcs={
	(do_not_order, updating, 1);
	(reorder, replenish, 1);
	(in_stock, shipping, 1);
	(t24, archiving_L, 1);
	(t23, archiving_F, 1);
	(t22, archiving_E, 1);
	(t18, shipping_l, 1);
	(t16, replenish_L, 1);
	(t7, billing_F, 1);
	(t9, checking_L, 1);
	(t3, start_L, 1);
	(t1, start_F, 1);
	(t2, start_E, 1);
	(new_order, start, 1);
	(archive_L, L_avail, 1);
	(archive_L, archived, 1);
	(archive_F, F_avail, 1);
	(archive_F, archived, 1);
	(archive_E, E_avail, 1);
	(archive_E, archived, 1);
	(ship_goods, L_avail, 1);
	(ship_goods, shipped, 1);
	(replenishing, L_avail, 1);
	(replenishing, updating, 1);
	(check_availability, checked, 1);
	(check_availability, L_avail, 1);
	(update, checking, 1);
	(receive_payments, payed, 1);
	(send_bill, billed, 1);
	(send_bill, F_avail, 1);
	(reminder, billing, 1);
	(reminder, shipped, 1);
	(register_l, L_avail, 1);
	(register_l, checking, 1);
	(register_l, billing, 1);
	(register_F, F_avail, 1);
	(register_F, checking, 1);
	(register_F, billing, 1);
	(register_E, E_avail, 1);
	(register_E, checking, 1);
	(register_E, billing, 1);
};

